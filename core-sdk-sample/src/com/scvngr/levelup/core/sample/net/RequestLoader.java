package com.scvngr.levelup.core.sample.net;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.os.Parcelable;
import android.support.v4.content.AsyncTaskLoader;
import android.text.TextUtils;

import com.scvngr.levelup.core.model.Error;
import com.scvngr.levelup.core.model.factory.json.AbstractJsonModelFactory;
import com.scvngr.levelup.core.model.factory.json.ErrorJsonFactory;
import com.scvngr.levelup.core.net.AbstractRequest;
import com.scvngr.levelup.core.net.ApiStatus;
import com.scvngr.levelup.core.net.LevelUpWebServiceConnection;
import com.scvngr.levelup.core.net.LevelUpWebServiceResponse;
import com.scvngr.levelup.core.sample.net.RequestLoader.RequestResult;
import com.scvngr.levelup.core.util.LogManager;

/**
 * <p>
 * A loader that makes network requests and returns LevelUp Web Service objects (
 * {@link com.scvngr.levelup.core.model.User}, {@link com.scvngr.levelup.core.model.AccessToken},
 * {@link com.scvngr.levelup.core.model.PaymentToken}, etc.).
 * </p>
 * <p>
 * Note: currently this only supports endpoints that return a single object.
 * </p>
 * 
 * @param <T> the type of model to load.
 */
public class RequestLoader<T extends Parcelable> extends AsyncTaskLoader<RequestResult<T>> {

    private final AbstractRequest mRequest;
    private final AbstractJsonModelFactory<T> mModelFactory;

    private RequestResult<T> mResult;

    /**
     * Create a new loader to load the given {@link AbstractRequest}.
     * 
     * @param context application context.
     * @param request the request to load.
     * @param modelFactory the model factory to use to process the result.
     */
    public RequestLoader(Context context, AbstractRequest request,
            AbstractJsonModelFactory<T> modelFactory) {
        super(context);
        mRequest = request;
        mModelFactory = modelFactory;
    }

    @Override
    public RequestResult<T> loadInBackground() {
        T result = null;

        LevelUpWebServiceConnection connection =
                LevelUpWebServiceConnection.newInstance(getContext());
        LogManager.v("Sending request %s...", mRequest);
        LevelUpWebServiceResponse response = connection.send(mRequest);
        LogManager.v("Got response %s", response);

        String data = response.getData();
        List<Error> errors = null;

        try {
            if (response.getStatus().equals(ApiStatus.OK)) {
                LogManager.v("Parsing response...");
                result = mModelFactory.from(new JSONObject(data));
            } else {
                /*
                 * The LevelUp web service returns JSON arrays of errors in its responses. In a
                 * real-world application, this should probably check the Content-Type returned
                 * before attempting to parse it as JSON.
                 */
                if (!TextUtils.isEmpty(data.trim())) {
                    errors = new ErrorJsonFactory().fromList(new JSONArray(data));
                }
            }
        } catch (JSONException e) {
            // Don't mask other errors with a parsing error.
            if (response.getStatus().equals(ApiStatus.OK)) {
                LogManager.e("JSONException while parsing model", e);
                response = new LevelUpWebServiceResponse(data, ApiStatus.ERROR_PARSING, e);
            }
        }

        return new RequestResult<T>(response, result, errors);
    }

    @Override
    public void deliverResult(RequestResult<T> data) {
        mResult = data;

        if (isStarted()) {
            LogManager.d("Delivering response to callbacks: %s", data);
            super.deliverResult(data);
        }
    }

    @Override
    protected void onReset() {
        super.onReset();

        mResult = null;
    }

    @Override
    protected void onStartLoading() {
        if (mResult != null) {
            deliverResult(mResult);
        }

        if (takeContentChanged() || mResult == null) {
            forceLoad();
        }
    }

    /**
     * A simple composite object returning both the response and the parsed result. If
     * {@link #getResult()} returns null, {@link #getErrors()} should be checked.
     * 
     * @param <T2> the type of model to return.
     */
    public static final class RequestResult<T2 extends Parcelable> {
        private final LevelUpWebServiceResponse mResponse;
        private final T2 mResult;
        private final List<Error> mErrors;

        /**
         * @param response the full network response.
         * @param result the result of the request, if successful.
         * @param errors an optional list of errors generated by web service.
         */
        public RequestResult(LevelUpWebServiceResponse response, T2 result, List<Error> errors) {
            mResponse = response;
            mResult = result;
            mErrors = errors;
        }

        /**
         * @return the full network response.
         */
        public LevelUpWebServiceResponse getResponse() {
            return mResponse;
        }

        /**
         * @return the result of the request, if successful.
         */
        public T2 getResult() {
            return mResult;
        }

        /**
         * @return one or more errors from the web service, or null if the request was successful.
         */
        public List<Error> getErrors() {
            return mErrors;
        }
    }
}
